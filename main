
"""
Google Cloud Function Entry Point for Amazon PPC Optimizer
Triggered by Cloud Scheduler via HTTP request
"""

import json
import logging
import os
import sys
import traceback
from datetime import datetime
import functions_framework
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import requests

# Add parent directory to path to import optimizer
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Import the main optimizer (we'll include it in the deployment)
from optimizer_core import AmazonPPCOptimizer

# Configure logging for Cloud Functions
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def send_email_notification(subject, body, config):
    """Send email notification via SMTP"""
    try:
        email_config = config.get('email_notifications', {})
        if not email_config.get('enabled', False):
            logger.info("Email notifications disabled")
            return
        
        msg = MIMEMultipart('alternative')
        msg['Subject'] = subject
        msg['From'] = email_config['from_email']
        msg['To'] = email_config['to_email']
        
        # Create HTML version
        html_body = f"""
        <html>
        <head></head>
        <body>
            <h2>{subject}</h2>
            <div style="font-family: Arial, sans-serif;">
                {body.replace('\n', '<br>')}
            </div>
            <hr>
            <p style="color: #666; font-size: 12px;">
                Generated by Amazon PPC Optimizer on Google Cloud Functions<br>
                Dashboard: <a href="{config.get('dashboard', {}).get('url', '#')}">View Dashboard</a>
            </p>
        </body>
        </html>
        """
        
        msg.attach(MIMEText(body, 'plain'))
        msg.attach(MIMEText(html_body, 'html'))
        
        # Send via SMTP
        with smtplib.SMTP(email_config['smtp_host'], email_config['smtp_port']) as server:
            server.starttls()
            server.login(email_config['smtp_user'], email_config['smtp_password'])
            server.send_message(msg)
        
        logger.info(f"Email notification sent to {email_config['to_email']}")
        
    except Exception as e:
        logger.error(f"Failed to send email: {str(e)}")


def update_dashboard(results, config):
    """Send optimization results to the dashboard"""
    try:
        dashboard_url = config.get('dashboard', {}).get('url')
        if not dashboard_url:
            logger.warning("Dashboard URL not configured")
            return
        
        # Send POST request to dashboard API endpoint
        api_endpoint = f"{dashboard_url}/api/optimization-results"
        
        payload = {
            'timestamp': datetime.now().isoformat(),
            'results': results,
            'status': 'success'
        }
        
        response = requests.post(
            api_endpoint,
            json=payload,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        if response.status_code == 200:
            logger.info("Dashboard updated successfully")
        else:
            logger.warning(f"Dashboard update returned status {response.status_code}")
            
    except Exception as e:
        logger.error(f"Failed to update dashboard: {str(e)}")


@functions_framework.http
def run_optimizer(request):
    """
    Cloud Function entry point - triggered by Cloud Scheduler
    
    Args:
        request: HTTP request object (from Cloud Scheduler)
        
    Returns:
        Response object with execution results
    """
    
    start_time = datetime.now()
    logger.info(f"=== Amazon PPC Optimizer Started at {start_time} ===")
    
    try:
        # Load configuration from environment or file
        config = load_config()
        
        # Validate required credentials
        validate_credentials(config)
        
        # Check if this is a dry run
        dry_run = request.args.get('dry_run', 'false').lower() == 'true'
        
        # Initialize optimizer
        logger.info("Initializing optimizer...")
        optimizer = AmazonPPCOptimizer(config, dry_run=dry_run)
        
        # Run optimization
        logger.info("Running optimization...")
        results = optimizer.run()
        
        # Update dashboard
        logger.info("Updating dashboard...")
        update_dashboard(results, config)
        
        # Prepare summary
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        summary = format_results_summary(results, duration, dry_run)
        
        # Send email notification
        if config.get('email_notifications', {}).get('send_on_completion', True):
            subject = f"Amazon PPC Optimization {'(DRY RUN) ' if dry_run else ''}Completed Successfully"
            send_email_notification(subject, summary, config)
        
        logger.info(f"=== Optimization Completed in {duration:.2f} seconds ===")
        
        return {
            'status': 'success',
            'message': 'Optimization completed successfully',
            'results': results,
            'duration_seconds': duration,
            'dry_run': dry_run
        }, 200
        
    except Exception as e:
        error_msg = str(e)
        error_trace = traceback.format_exc()
        logger.error(f"Optimization failed: {error_msg}")
        logger.error(error_trace)
        
        # Send error notification
        try:
            config = load_config()
            if config.get('email_notifications', {}).get('send_on_error', True):
                subject = "Amazon PPC Optimization FAILED"
                body = f"""
Optimization Run Failed

Error: {error_msg}

Timestamp: {datetime.now().isoformat()}

Stack Trace:
{error_trace}

Please check the Cloud Functions logs for more details.
                """
                send_email_notification(subject, body, config)
        except:
            pass
        
        return {
            'status': 'error',
            'message': error_msg,
            'timestamp': datetime.now().isoformat()
        }, 500


def load_config():
    """Load configuration from environment variables or config file"""
    
    # Check if config is in environment variable (recommended for Cloud Functions)
    config_json = os.environ.get('PPC_CONFIG')
    if config_json:
        logger.info("Loading config from environment variable")
        return json.loads(config_json)
    
    # Fall back to config.json file
    config_file = os.path.join(os.path.dirname(__file__), 'config.json')
    if os.path.exists(config_file):
        logger.info(f"Loading config from {config_file}")
        with open(config_file, 'r') as f:
            return json.load(f)
    
    raise ValueError("No configuration found. Set PPC_CONFIG environment variable or provide config.json")


def validate_credentials(config):
    """Validate required API credentials are present"""
    required_fields = ['client_id', 'client_secret', 'refresh_token', 'profile_id']
    amazon_api = config.get('amazon_api', {})
    
    missing = [field for field in required_fields if not amazon_api.get(field)]
    
    if missing:
        raise ValueError(f"Missing required API credentials: {', '.join(missing)}")


def format_results_summary(results, duration, dry_run):
    """Format optimization results into email-friendly summary"""
    
    summary_lines = [
        f"Amazon PPC Optimization Report",
        f"{'=' * 50}",
        f"",
        f"Run Mode: {'DRY RUN (No changes made)' if dry_run else 'LIVE MODE'}",
        f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}",
        f"Duration: {duration:.2f} seconds",
        f"",
        f"Results:",
        f"-" * 50,
    ]
    
    # Add key metrics
    if 'summary' in results:
        summary = results['summary']
        summary_lines.extend([
            f"Campaigns Analyzed: {summary.get('campaigns_analyzed', 0)}",
            f"Keywords Optimized: {summary.get('keywords_optimized', 0)}",
            f"Bids Adjusted: {summary.get('bids_adjusted', 0)}",
            f"Negative Keywords Added: {summary.get('negative_keywords_added', 0)}",
            f"Budget Changes: {summary.get('budget_changes', 0)}",
            f"",
        ])
    
    # Add performance highlights
    if 'highlights' in results:
        summary_lines.append("Performance Highlights:")
        for highlight in results['highlights']:
            summary_lines.append(f"  • {highlight}")
        summary_lines.append("")
    
    # Add recommendations
    if 'recommendations' in results:
        summary_lines.append("Recommendations:")
        for rec in results['recommendations']:
            summary_lines.append(f"  • {rec}")
        summary_lines.append("")
    
    summary_lines.extend([
        f"-" * 50,
        f"",
        f"For detailed insights, visit the dashboard:",
        f"{results.get('dashboard_url', 'Not configured')}",
    ])
    
    return '\n'.join(summary_lines)
