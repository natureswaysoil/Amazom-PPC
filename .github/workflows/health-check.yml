name: Health Check and Notifications

on:
  # Triggered after the Deploy to Google Cloud workflow completes
  workflow_run:
    workflows: ["Deploy to Google Cloud"]
    types:
      - completed

  # Allow manual trigger for testing
  workflow_dispatch:

jobs:
  health-check-and-notify:
    runs-on: ubuntu-latest
    # Only run if the deployment workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting 30 seconds for Cloud Function to be fully available..."
          sleep 30

      - name: Run Health Check
        id: health_check
        run: |
          echo "Running health check on Cloud Function..."

          # Health check URL
          HEALTH_URL="https://amazon-ppc-optimizer-nucguq3dba-uc.a.run.app/?health=true"

          # Perform health check
          RESPONSE=$(curl -s -w "\n%{http_code}" "$HEALTH_URL" || echo "000")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)

          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $BODY"

          # Save results for later steps
          echo "http_code=$HTTP_CODE" >> $GITHUB_OUTPUT
          echo "response_body=$BODY" >> $GITHUB_OUTPUT

          # Check if health check passed
          if [ "$HTTP_CODE" = "200" ] && echo "$BODY" | grep -q "healthy"; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "✅ Health check passed!"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ Health check failed!"
            exit 1
          fi

      - name: Send Email Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          # Gmail SMTP configuration
          # Configure these secrets in your GitHub repository:
          # Settings -> Secrets and variables -> Actions -> New repository secret
          #
          # GMAIL_USER: Your Gmail address (e.g., natureswaysoil@gmail.com)
          # GMAIL_PASS: Your Gmail App Password (not your regular password!)
          #   - Go to: https://myaccount.google.com/apppasswords
          #   - Generate a new app password for "GitHub Actions"
          #   - Use that 16-character password as GMAIL_PASS
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.GMAIL_USER }}
          password: ${{ secrets.GMAIL_PASS }}
          subject: "Amazon PPC Optimizer - Deployment Health Check ${{ steps.health_check.outputs.status == 'success' && '✅ PASSED' || '❌ FAILED' }}"
          to: natureswaysoil@gmail.com
          from: ${{ secrets.GMAIL_USER }}
          body: |
            Amazon PPC Optimizer Cloud Function - Health Check Report

            ========================================
            Deployment Information
            ========================================
            Repository: ${{ github.repository }}
            Workflow: ${{ github.workflow }}
            Run ID: ${{ github.run_id }}
            Triggered by: ${{ github.event_name }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}

            ========================================
            Health Check Results
            ========================================
            Status: ${{ steps.health_check.outputs.status == 'success' && '✅ SUCCESS' || '❌ FAILED' }}
            HTTP Status Code: ${{ steps.health_check.outputs.http_code }}
            Response: ${{ steps.health_check.outputs.response_body }}
            Timestamp: ${{ github.event.workflow_run.updated_at || github.event.repository.updated_at }}

            ========================================
            Cloud Function Details
            ========================================
            URL: https://amazon-ppc-optimizer-nucguq3dba-uc.a.run.app
            Health Endpoint: https://amazon-ppc-optimizer-nucguq3dba-uc.a.run.app/?health=true

            ========================================
            Next Steps
            ========================================
            ${{ steps.health_check.outputs.status == 'success' && '✅ The Cloud Function is healthy and ready to use.' || '❌ Please check the Cloud Function logs and redeploy if necessary.' }}

            View logs: https://console.cloud.google.com/functions
            View workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

            ========================================
            Dashboard
            ========================================
            View optimization results: https://ppc-dashboard.abacusai.app

            ---
            Generated by GitHub Actions - Amazon PPC Optimizer
            Repository: https://github.com/${{ github.repository }}

      - name: Post to Dashboard API
        if: steps.health_check.outputs.status == 'success'
        run: |
          echo "Posting health check results to dashboard..."

          # ========================================
          # DASHBOARD API INTEGRATION
          # ========================================
          #
          # Configure these secrets in your GitHub repository for dashboard integration:
          #
          # DASHBOARD_API_ENDPOINT: The full URL to your dashboard API endpoint
          #   Example: https://ppc-dashboard.abacusai.app/api/health-check
          #
          # DASHBOARD_API_KEY: Authentication token for the dashboard API
          #   Example: Bearer your-api-key-here
          #   OR: your-api-key-here (depending on your dashboard's auth method)
          #
          # To add these secrets:
          # 1. Go to: GitHub Repository -> Settings -> Secrets and variables -> Actions
          # 2. Click "New repository secret"
          # 3. Add DASHBOARD_API_ENDPOINT with your dashboard's API URL
          # 4. Add DASHBOARD_API_KEY with your authentication token
          #
          # ========================================

          # Check if dashboard secrets are configured
          if [ -z "${{ secrets.DASHBOARD_API_ENDPOINT }}" ]; then
            echo "⚠️  DASHBOARD_API_ENDPOINT secret not configured"
            echo "Dashboard integration is optional. Configure the secret to enable it."
            echo "See workflow comments for configuration instructions."
            exit 0
          fi

          # Prepare JSON payload
          PAYLOAD=$(cat <<EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "status": "${{ steps.health_check.outputs.status }}",
            "http_code": "${{ steps.health_check.outputs.http_code }}",
            "response": ${{ toJSON(steps.health_check.outputs.response_body) }},
            "deployment": {
              "repository": "${{ github.repository }}",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "workflow_run_id": "${{ github.run_id }}"
            },
            "cloud_function": {
              "url": "https://amazon-ppc-optimizer-nucguq3dba-uc.a.run.app",
              "health_endpoint": "https://amazon-ppc-optimizer-nucguq3dba-uc.a.run.app/?health=true"
            }
          }
          EOF
          )

          echo "Payload to send:"
          echo "$PAYLOAD"

          # Post to dashboard API
          # Adjust the authorization header format based on your dashboard's requirements
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DASHBOARD_API_KEY }}" \
            -d "$PAYLOAD" \
            "${{ secrets.DASHBOARD_API_ENDPOINT }}" || echo "000")

          API_HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          API_BODY=$(echo "$RESPONSE" | head -n-1)

          echo "Dashboard API Response:"
          echo "HTTP Status: $API_HTTP_CODE"
          echo "Body: $API_BODY"

          if [ "$API_HTTP_CODE" = "200" ] || [ "$API_HTTP_CODE" = "201" ]; then
            echo "✅ Successfully posted to dashboard API"
          else
            echo "⚠️  Dashboard API returned status $API_HTTP_CODE"
            echo "This is not critical - the health check still passed"
          fi

      - name: Summary
        if: always()
        run: |
          echo "## Health Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.health_check.outputs.status }}" = "success" ]; then
            echo "✅ **Status**: Health check PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status**: Health check FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**HTTP Status Code**: ${{ steps.health_check.outputs.http_code }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Response**: \`${{ steps.health_check.outputs.response_body }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cloud Function URL**: https://amazon-ppc-optimizer-nucguq3dba-uc.a.run.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Dashboard**: https://ppc-dashboard.abacusai.app" >> $GITHUB_STEP_SUMMARY
